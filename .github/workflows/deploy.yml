name: "Build and Deploy"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR

env:
  TF_LOG: INFO
  NODE_VERSION: lts/*
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_DATABASE: ${{ secrets.DB_DATABASE }}
  JWT_KEY: ${{ secrets.JWT_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/node
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./node/package-lock.json

      - name: Install
        run: npm ci

      - name: Coverage Report
        run: npm run coverage

  container:
    runs-on: ubuntu-latest
    needs: build

    env:
      IMAGE_REF: ghcr.io/devsos17/academy-sre-bootcamp-santiago-orozco:latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          context: "{{defaultContext}}:node"
          file: Dockerfile
          tags: |
            ${{ env.IMAGE_REF }}

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ env.IMAGE_REF }}
      #     format: "table"
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: "os,library"
      #     severity: "CRITICAL,HIGH"

  deploy:
    runs-on: ubuntu-latest
    needs: container
    defaults:
      run:
        shell: bash
        working-directory: .

    env:
      TF_VAR_DB_HOST: ${{ secrets.DB_HOST }}
      TF_VAR_DB_USER: ${{ secrets.DB_USER }}
      TF_VAR_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      TF_VAR_DB_DATABASE: ${{ secrets.DB_DATABASE }}
      TF_VAR_JWT_KEY: ${{ secrets.JWT_KEY }}
      TF_VAR_CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PSK }}
      AWS_REGION: us-east-1

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
